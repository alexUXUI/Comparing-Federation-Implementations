@startuml Native Federation Runtime Flow

participant "Bootstrap" as Boot
participant "App\nComponent" as App
participant "Native Federation\nRuntime" as NF
participant "React" as React
participant "Browser DOM" as Browser
participant "Remote MFE\nServer" as Remote

== Federation Initialization ==
note over Boot: Application startup begins

Boot -> NF: initFederation({mfe1: "http://localhost:3001/remoteEntry.json"})
activate NF

NF -> Remote: HTTP GET /remoteEntry.json
activate Remote
Remote --> NF: 200 OK: {exposes, shared, ...}
deactivate Remote

NF -> NF: processHostInfo()
note right: Loads local manifest\nand processes shared deps

NF -> NF: processRemoteInfos(remotes)
note right: Maps remote modules\nand creates import maps

NF -> NF: mergeImportMaps(hostMap, remoteMap)
note right: Combines host and remote\nimport mappings

NF -> Browser: appendImportMap(importMap)
activate Browser
note right: Creates <script type="importmap-shim">
Browser --> NF: DOM Updated
deactivate Browser

NF -> NF: Initialize global state
note right: Sets up:\n- externals Map\n- remoteNamesToRemote Map\n- baseUrlToRemoteNames Map

NF --> Boot: Return importMap
deactivate NF

== Application Bootstrap ==
Boot -> React: import React from "react"
Boot -> React: import ReactDOM from "react-dom"
Boot -> App: import { App } from "./app"

Boot -> React: ReactDOM.render()
activate React

React -> App: Create App Component
activate App

App -> React: React.lazy(() => ...)
activate React
note right: Creates lazy-loaded\ncomponent boundary

App -> NF: loadRemoteModule({remoteName: "mfe1", exposedModule: "./component"})
activate NF

NF -> NF: normalizeOptions()
note right: Validates and normalizes\nremote module options

NF -> NF: ensureRemoteInitialized()
note right: Checks if remote is ready

NF -> Remote: Fetch remote module
activate Remote
Remote --> NF: Return module code
deactivate Remote

NF -> Browser: Import module via importShim
activate Browser
note right: Uses import map to\nresolve module URL
Browser --> NF: Module loaded
deactivate Browser

NF --> App: Return remote module
deactivate NF

App -> React: React.Suspense
note right: Wraps remote component\nwith suspense boundary

React -> Browser: Render to DOM
activate Browser
Browser --> React: DOM Updated
deactivate Browser

deactivate React
deactivate App

@enduml